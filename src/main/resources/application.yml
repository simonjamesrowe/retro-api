spring:
  data:
    mongodb:
      authentication-database: admin
      uri: mongodb://root:r00t@localhost:27017
      database: retro
  cloud:
    stream:
      bindings:
        input:
          destination: retro_events
          group: retro-api-spring-cloud-stream
          consumer:
            useNativeDecoding: false
            batchMode: true
      kafka:
        binder:
          brokers: ${axon.kafka.bootstrap-servers}
          consumer-properties:
            value.deserializer: org.apache.kafka.common.serialization.StringDeserializer
        bindings:
          default:
            consumer:
              # do not move the commit forward when there's an error
              autoCommitOnError: false
              # do commits when messages appear to have been processed
              autoCommitOffset: true
              # on first EVER start up (before the consumer group is even created), go to the earliest message
              startOffset: latest
              # treat the headers as bytes

axon:
  
  axonserver:
    enabled: false
  serializer:
    events: jackson
    messages: jackson
    general: jackson
  kafka:
    bootstrap-servers: localhost:9092
    client-id: retro-api
    default-topic: retro_events
    properties:
      security.protocol: PLAINTEXT

    publisher:
      confirmation-mode: wait_for_ack

    producer:
      event-processor-mode: subscribing
      # For additional unnamed properties, add them to the `properties` map like so
      properties:
        some-key: [some-value]
      acks: 1

    fetcher:
      poll-timeout: 3000

    consumer:
      enable-auto-commit: true
      auto-commit-interval: 3000
      event-processor-mode: tracking
      # For additional unnamed properties, add them to the `properties` map like so
      #properties:
      #  some-key: [some-value]

